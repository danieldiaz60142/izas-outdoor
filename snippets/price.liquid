

{%- comment -%}
  Parameters:
  - product {Object} - Product object.
  - class {String} - CSS Class (optional)
  - use_variant {Boolean} - Use variant price instead of general (optional, default is false).

  Usage:
  {% render 'price', product: product, color: color %}
{%- endcomment -%}

{%- liquid
  if use_variant
    assign variant = product.selected_or_first_available_variant
  else
    assign use_variant = false
    assign variant = product.variants | sort: 'price' | first
  endif

  assign available = variant.available | default: false
  assign compare_at_price = variant.compare_at_price
  assign price = variant.price | default: 1999
   
    if compare_at_price > price
    assign price_difference = compare_at_price | minus: price
    assign percentage_savings = price_difference | times: 100 | divided_by: compare_at_price
  else
    assign percentage_savings = 0
  endif
-%}
<price-sale>
<div class="price-{{ variant_value.id }} price{%- if compare_at_price > price %} price--on-sale{% endif -%}
                 {%- if available == false %} price--sold-out{% endif -%}{% if class %} {{ class }}{% endif %} price-sale-tag" data-price="{{price}}" data-compare="{{ compare_at_price }}">
  <div class="price__default">
    {%- if product.price_varies and use_variant == false %}
      {% comment %}
      <span class="price__from">{{ 'products.product.from' | t }}</span>
      {% endcomment %}
    {%- endif %}
    <strong class="price__current">{%- render 'price-as-money', price: price -%}</strong>
    <s class="price__was{% if settings.superscript_decimals %} price__was--supercents{% endif %} {% unless compare_at_price and compare_at_price > price -%}hidden{% endunless %}">
      {%- if compare_at_price and compare_at_price > price -%}
        {%- render 'price-as-money', price: compare_at_price, show_money_with_currency: false -%}
      {%- endif -%}
    </s>

   
    <span class="price__discount" style="color:#c83737 !important;"></span>

   

    
  </div>

  <div class="unit-price relative"{% if variant.unit_price_measurement == nil %} hidden{% endif %}><span class="visually-hidden">{{ 'products.product.price.unit_price' | t }}</span><span class="unit-price__price">{%- render 'price-as-money', price: variant.unit_price -%}</span><span class="unit-price__separator">{{ 'products.product.price.unit_price_separator' | t }}</span><span class="unit-price__unit">{%- if variant.unit_price_measurement.reference_value != 1 -%}{{- variant.unit_price_measurement.reference_value -}}{%- endif -%}{{ variant.unit_price_measurement.reference_unit }}</span></div>

  <div class="price__no-variant" hidden>
    <strong class="price__current">{{ 'products.variant.non_existent' | t }}</strong>
  </div>
</div>
</price-sale>



 <script>
    // Seleccionamos el elemento a observar
    const priceWas = document.querySelector('.price__was');
    const priceDiscount = document.querySelector('.price__discount');

    // Creamos una instancia de MutationObserver
    const observer = new MutationObserver((mutations) => {
      mutations.forEach((mutation) => {
        if (mutation.attributeName === 'class') {
          // Verificamos si el elemento tiene la clase 'hidden'
          if (priceWas?.classList.contains('hidden')) {
            priceDiscount.style.display = 'none';
          } else {
            priceDiscount.style.display = 'inline';
          }
        }
      });
    });

    // Configuramos el observer para observar cambios en los atributos del elemento
    observer.observe(priceWas, { attributes: true });

    // Verificamos el estado inicial del elemento
    if (priceWas?.classList.contains('hidden')) {
      priceDiscount.style.display = 'none';
    } else {
      priceDiscount.style.display = 'inline';
    }
  </script>



